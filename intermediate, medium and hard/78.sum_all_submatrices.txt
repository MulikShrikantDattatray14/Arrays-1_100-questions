Given a 2D Matrix A of dimensions N*N, we need to return the sum of all possible submatrices.

Input 1:
A = [ [1, 1]
      [1, 1] ]
Input 2:
A = [ [1, 2]
      [3, 4] ]

Example Output
Output 1:
16
Output 2:
40


Example Explanation
Example 1:
Number of submatrices with 1 elements = 4, so sum of all such submatrices = 4 * 1 = 4
Number of submatrices with 2 elements = 4, so sum of all such submatrices = 4 * 2 = 8
Number of submatrices with 3 elements = 0
Number of submatrices with 4 elements = 1, so sum of such submatrix = 4
Total Sum = 4+8+4 = 16
Example 2:
The submatrices are [1], [2], [3], [4], [1, 2], [3, 4], [1, 3], [2, 4] and [[1, 2], [3, 4]].
Total sum = 40

/////////////////////////////////////////////////////////////////////////////////////////////////////////
APPROACH :-
------------
logic : find the count of the submatrices, the element is part of , thus for each element s(x,y) = (x*y)*(N-x+1)*(N-y+1) i.e top left * bottom right 

// thus multiply the count with each element. thus s(x,y) * element.

=============================================================================================================


A = [
    [1, 2],
    [3, 4],
];
let ret = 0;
for (let i = 0; i < A.length; i++) {
    for (let j = 0; j < A[i].length; j++) {
        //times- Number of sub matrices that contain A[i][j]
        //topleft= x*y;
        //bottomright= (n-x+1)*(n-y+1)
        let times = (i + 1) * (j + 1) * (A.length - i) * (A.length - j);
        ret += A[i][j] * times;
    }
}
console.log(ret);