  //https://www.youtube.com/watch?v=6ENl3OwwxLg

Example Input
Input 1:
 A = [1, 2, 3]
Input 2:
 A = [3, 2, 1]


Example Output
Output 1:
 [1, 3, 2]
Output 2:
 [1, 2, 3]


Example Explanation
Explanation 1:
 Next permutaion of [1, 2, 3] will be [1, 3, 2].
Explanation 2:
 No arrangement is possible such that the number are arranged into the numerically next greater permutation of numbers.
 So will rearranges it in the lowest possible order.

 //////////////////////////////////////////////////////////////////////////////////////

let A = [3, 2, 1];
let ans= solve(A)
console.log(ans)
function solve(A) {
    let n = A.length;
    // always place k at 2nd last position , to check the sequence right of it has exhausted or not
    let k = n - 2;
    // Edge case
    if (A.length <= 1) return A;

    // find the k
    for (let i = n - 1; i > 0; i--) {
        if (A[i] <= A[i - 1]) {// '=' handles duplicate
        // keep shifting k backwards
            k--;
        } else {
            break;
        }
    }

    // if k==-1 , reverse the part right of k
    if (k == -1) {// means the given input is already at last position , so its next permutaion will the start of the all the combination
        reverse(A, 0, n - 1);
        return A;
    }

    //else replace k with the next greater element from backwards

    for (let i = n - 1; i > 0; i--) {
        if (A[i] > A[k]) {
            let temp = A[k];
            A[k] = A[i];
            A[i] = temp;
            break;
        }
    }
    reverse(A, k + 1, n - 1)
    return A;
}

function reverse(arr, i, j) {
    while (i < j) {
        let temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        i++;
        j--
    }
}
