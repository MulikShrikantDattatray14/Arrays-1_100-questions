Problem Description:
Given an array of integers A and multiple values in B, which represents the number of times array A needs to be left rotated.

Find the rotated array for each value and return the result in the from of a matrix where ith row represents the rotated array for the ith value in B.


Example Input
Input 1:
 
    A = [1, 2, 3, 4, 5]
    B = [2, 3]

Input 2:

  
    A = [5, 17, 100, 11]
    B = [1]




Example Output
Output 1:
 
    [ [3, 4, 5, 1, 2]
     [4, 5, 1, 2, 3] ]


Output 2:

    
    [ [17, 100, 11, 5] ]



Example Explanation
for input 1 -> B[0] = 2 which requires 2 times left rotations

1: [2, 3, 4, 5, 1]

2: [3, 4, 5, 1, 2]

B[1] = 3 which requires 3 times left rotation

1: [2, 3, 4, 5, 1]

2: [3, 4, 5, 1, 2]

2: [4, 5, 1, 2, 4]


////////////////////////////////////////////////////////////////////////////////

A = [1, 2, 3, 4, 5]
B = [2, 3]
let ans = solve(A, B)
console.log(ans)//[ [ 3, 4, 5, 1, 2 ], [ 4, 5, 1, 2, 3 ] ]
function solve(A, B) {
    let ans = [];
    let m = B.length;
    let n = A.length;
    for (let i = 0; i < m; i++) {
        let index = B[i] % n;
        let temp = [];
        for (let j = index; j < n; j++) {
            temp.push(A[j]);
        }
        for (let j = 0; j < index; j++) {
            temp.push(A[j]);
        }
        ans.push(temp);
    }
    return ans;
}